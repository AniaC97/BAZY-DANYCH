;zadanie 1  Projekcja wyników zapytań (SELECT ... FROM ...)

    ;2.1 Wyświetlić zawartość kolumn imię, nazwisko i pensja z tabeli pracownik. Wynik posortuj malejąco względem
    pensji .

    SELECT imie, nazwisko, pensja FROM pracownik 
    ORDER BY pensja

    ;2.2 Wyświetl zawartość kolumn nazwisko i imię z tabeli pracownik. Wynik posortuj rosnąco (leksykograficznie)
    względem nazwiska i imienia.

    SELECT imie, nazwisko FROM pracownik
    ORDER BY nazwisko, imie

    ;2.3 Wyświetlić zawartość kolumn nazwisko, pensja, dodatek z tabeli pracownik. Wynik posortuj rosnąco
    względem pensji, a dla tych samych wartości  pola pensja malejąco względem dodatku.

    SELECT nazwisko, pensja, dodatek FROM pracownik
    ORDER BY pensja ASC, dodatek DESC;


;zadanie 3 Eliminowanie duplikatów wyników zapytań (DISTINCT)

    ;3.1 Wyświetlić niepowtarzające się wartości kolumny pensja z tabeli pracownik.

    SELECT DISTINCT pensja FROM pracownik

    ;3.2 Wyświetlić unikatowe wiersze zawierające wartości kolumn pensja i dodatek w tabeli pracownik.

    SELECT DISTINCT pensja, dodatek FROM pracownik

    ;3.3 Wyświetlić unikatowe wiersze zawierające wartości kolumn pensja i dodatek w tabeli pracownik. Wy
    nik posortujmalejąco względem pensji i dodatku.

    SELECT DISTINCT pensja, dodatek FROM pracownik 
    ORDER BY pensja DESC, dodatek DESC;



;zadanie 4 Selekcja wyników zapytań (WHERE)

    ;4.1 Znajdź klientów o imieniu Jan. Wyświetl ich imiona i nazwiska.

    SELECT imie, nazwisko FROM pracownik
    WHERE imie='Jan';

    ;4.2 Wyświetlić imiona i nazwiska klientów, którzy jako haslo ustawili słowo 'password'

    SELECT imie, nazwisko, haslo FROM klient
    WHERE haslo='password';

    ;4.3 Wyświetlić imiona, nazwiska, pensje pracowników , którzy zarabiają powyżej 1500 zł. Wynik posortuj
    malejąco względem pensji.

    SELECT imie, nazwisko, pensja FROM pracownik
    WHERE pensja>1500
    ORDER BY pensja DESC



;Zadanie 5
;Warunki złożone (AND, OR, NOT)

    ;5.1 Znajdź produkty (id_produkt, id_producent,nazwa), których cena netto jest mniejsza od 10zl ale większa niż 5 zl.

    SELECT id_produkt, id_producent, nazwa FROM produkt
    WHERE cena_netto<10 and cena_netto>5

    ;5.2  Znajdź produkty (id_produkt, id_producent,nazwa, cena_netto), których cena netto jest mniejsza od 10zl lub większa niż 5000zl.

    SELECT id_produkt, id_producent, nazwa, cena_netto FROM produkt
    WHERE cena_netto<10 or cena_netto>5000

    ;5.3  Znajdź te produkty, których podatek jest 23% a ich cena jest większa niż 500zl.

    SELECT id_produkt, podatek, cena_netto FROM produkt
    WHERE podatek=23 and cena_netto>500


;6 Predykat IN 

    ;6.1 Znaleźć klientów o imionach 'Tomasz ' , 'Robert' lub 'Jan'

    select imie from pracownik
    where imie in ('Tomasz', 'Robert', 'Jan')

    ;6.2 Znajdź pracowników o imionach Anna, Marzena i Alicja. Wyświetl ich imiona, nazwiska i daty zatrudnienia. 

    select imie, nazwisko, data_zatrudnienia from pracownik
    where imie in ('Anna', 'Marzena', 'Alicja')
 

;7.  Predykat LIKE 

    ;7.1 Wyświetlić imiona i nazwiska klientów, których nazwisko zawiera literę K.

    select imie, nazwisko from klient
    where nazwisko like '%k%';

    ;7.2 Wyświetlić imiona i nazwiska klientów, dla których nazwisko zaczyna się na D, a kończy się na SKI. 

    select imie, nazwisko from klient
    where nazwisko like 'd%ski';

    ;7.3 Znaleźć imiona i nazwiska klientów, których nazwisko zawiera drugą literę O lub A. 

    select imie, nazwisko from klient
    where nazwisko like '_o%' or nazwisko like '_a%';



;8 Predykat BETWEEN

    ;8.1 Z tabeli pracownik wyświetlić wiersze, dla których pensja jest z przedziału [3500,5000].

    select pensja from pracownik
    where pensja between 3500 and 5000;

    ;8.2 Znaleźć pracowników, którzy zostali zatrudnieni pomiędzy datami 2010-01-01 a 2011-12-31. 

    select data_zatrudnienia from pracownik
    where data_zatrudnienia between '2010-01-01' and '2011-12-31';


;9 Wartość NULL 

    ;9.1 Znaleźć pracowników, którzy nie mają określonego dodatku do pensji. 

    select dodatek from pracownik
    where dodatek is null;


    ;9.2 Dla każdego pracownika wyświetl imię, nazwisko i wysokość dodatku. Wartość NULL z kolumny dodatek powinna być wyświetlona jako 0. Wskazówka: Użyj funkcji COALESCE. 

    SELECT imie, nazwisko, COALESCE(dodatek, 0) FROM pracownik


;10 Kolumny wyliczeniowe (COALESCE) 

    ;10.1 Wyświetlić imiona, nazwiska pracowników ich pensje i dodatki oraz kolumnę wyliczeniową do_zapłaty, zawierającą sumę pensji i dodatku. Wskazówka: Wartość NULL z kolumny dodatek powinna być wyświetlona jako zero. 

    SELECT imie, nazwisko, pensja, coalesce(dodatek, 0), pensja+coalesce(dodatek, 0) AS 'do_zapłaty' FROM pracowni

    
    ;10.2 Dla każdego pracownika wyświetl imię, nazwisko i wyliczeniową kolumnę nowa_pensja, która będzie miała o 50% większą wartość niż dotychczasowe zarobki.

    SELECT imie, nazwisko, (pensja + COALESCE(dodatek, 0)) * 1.5 AS 'nowa_pensja 'FROM pracownik;

    
    ;10.3 Dla każdego pracownika oblicz ile wynosi 1% zarobków (pensja + dodatek). Wyświetl imię, nazwisko i obliczony 1%. Wyniki posortuj rosnąco względem obliczonego 1%.

    SELECT imie, nazwisko, (pensja + coalesce (dodatek, 0))/100 as 'procent_pensji' FROM pracownik

    ORDER BY procent_pensji ASC


;11 Ograniczanie wyników wyszukiwania (TOP) 

    ;11.1 Znajdź imię i nazwisko pracownika, który jako pierwszy został zatrudniony w sklepie. (Jest tylko jeden taki pracownik.) 

    SELECT TOP 1 imie, nazwisko FROM pracownik
    ORDER BY data_zatrudnienia ASC


    ;11.2 Wyświetl pierwszych czterech pracowników z alfabetycznej listy (nazwiska i imiona) wszystkich pracowników. (W tym zadaniu nie musisz się przejmować powtórkami imion i nazwisk, ale gdybyś chciał to sprawdź konstrukcję SELECT TOP x WITH TIES …)

    SELECT TOP 4 imie, nazwisko FROM pracownik

    ORDER BY nazwisko ASC, imie ASC


;12 Wybrane funkcje daty i czasu (DAY, MONTH, YEAR, GETDATE, DATEDIFF) 

    ;12.1 Wyszukaj pracowników zatrudnionych w maju. Wyświetl ich imiona, nazwiska i datę zatrudnienia. Wynik posortuj rosnąco względem nazwiska i imienia. Wskazówka: Zajrzyj do dokumentacji MS SQL i poczytaj o funkcjach: DAY, MONTH, YEAR, GETDATE, DATEDIFF. 

    SELECT imie, nazwisko, data_zatrudnienia FROM pracownik

    WHERE MONTH(data_zatrudnienia)=5

    ORDER BY nazwisko ASC, imie ASC


    ;12.2 Dla każdego pracownika (imię i nazwisko) oblicz ile już pracuje dni. Wynik posortuj malejąco według ilości przepracowanych dni. 

    SELECT imie, nazwisko, data_zatrudnienia, DATEDIFF (day, data_zatrudnienia, GETDATE()) AS liczbadni

    FROM pracownik

    ORDER BY liczbadni DESC
 

;13 Wybrane funkcje operujące na napisach (LEFT, RIGHT, LEN, UPPER, LOWER, STUFF) (Trudne)

    ;13.1 Wyświetl imię, nazwisko i inicjały każdego klienta. Wynik posortuj względem inicjałów, nazwiska i imienia klienta. Wskazówka: Zajrzyj do dokumentacji MS SQL i poczytaj o funkcjach: LEFT, RIGHT, LEN, UPPER, LOWER, STUFF. 

    SELECT imie, nazwisko, LEFT(imie,1)+'. '+LEFT(nazwisko,1)+'.' AS inicjaly FROM klient

    ORDER BY inicjaly, nazwisko, imie


    ;13.2 Wyświetl imiona i nazwiska klientów w taki sposób, aby pierwsza litera imienia i nazwiska była wielka, a pozostałe małe. 

    SELECT imie, UPPER(LEFT(imie, 1)) + SUBSTRING(imie, 2, len(imie)) AS imie_zmienione, nazwisko, UPPER(LEFT(nazwisko, 1)) + SUBSTRING(nazwisko, 2, len(nazwisko)) AS nazwisko_zmienione FROM klient


    ;13.3 Wyświetl imiona, nazwiska, adresy email oraz hasla. Każdy znak hasła powinien być zastąpiony znakiem x .

    SELECT imie, nazwisko, email, haslo, REPLICATE('x', LEN(haslo)) from KLIENT



;14 Modyfikacja danych w bazie danych (UPDATE) 

UPDATE nazwa_tabeli  SET nazwa_kolumny= ...... [WHERE .....]


    ;14.1 Pracownikom, którzy nie mają określonej wysokości dodatku nadaj dodatek w wysokości 50 zł. 

    UPDATE pracownik

    SET dodatek = 50

    WHERE dodatek is NULL


    ;14.2 Klientowi o identyfikatorze równym 10 zmień imię i nazwisko na Jerzy Nowak. 

    UPDATE klient

    SET imie='Jerzy', nazwisko='Nowak'

    WHERE id_klient = 10


    ;14.3 Zwiększ o 100 zł dodatek pracownikom, których pensja jest mniejsza niż 1500 zł. 

    UPDATE pracownik

    SET dodatek = dodatek+100

    WHERE pensja < '1500'


;15 Usuwanie danych z bazy danych (DELETE) 

;DELETE FROM nazwa_ tabeli WHERE ......


    ;15.1 Usunąć klienta o identyfikatorze równym 17. 

    DELETE FROM klient

    WHERE id_klient = 17


    ;15.2 Usunąć wszystkie informacje o fakturach klienta o identyfikatorze równym 3. 

    DELETE FROM faktura

    WHERE id_klient = 3



;16 Dodawanie danych do bazy danych (INSERT) 

INSERT INTO nazwa_tabeli(kolumna1, kolumna2,...) VALUES ( wartości oddzielone przecinkami, ciągi znaków w apostrofach)


    ;16.1 Dodaj do bazy danych klienta o identyfikatorze równym 121: Adam Cichy zamieszkały ul. Korzenna 12, 00-950 Warszawa, tel. 123-454-321, pesel: 56121201234, email:Acichy@oo.pl; haslo:haslo ; rabat 0; dodany dzisiaj.

    INSERT INTO adres VALUES (‘120’, ‘Korzenna’, ‘12’, ’00-950’, ‘Warszawa’)

    INSERT INTO klient (id_klient,  id_adres,  imie,  nazwisko,  pesel,  telefon,  email,  haslo,  rabat,  data_dodania) VALUES (‘121’, ’120’, ’Adam’, ’Cichy’, ’56121201234’, ’123454321’, ’Acichy@oo.pl’, ’haslo’, ’0’, ’2021-04-08’)


    ;16.2 Dodaj do bazy danych pracownika: Alojzy Mikos zatrudniony od 11 sierpnia 2010 r. pensja 3000 zł i dodatek 50 zł,pracownik zamieszkuje w Warszawie na ul. Lewartowskiego 12, kod pocztowy: 00-950.

    INSERT INTO adres VALUES (‘111’, ’Lewartowskiego’, ’12’, ’00-950’, ’Warszawa’)

    INSERT INTO pracownik (id_klient, id_adres, imie, nazwisko, data_zatrudnienia, pensja, dodatek, stanowisko) VALUES (‘15’, ’111’, ’Alojzy’, ’Mikos’, ’2010-08-11’, ’3000’, ’50’, ’sprzedwaca’)


;17.

    ;17.1 Dla każdej faktury wyświetl imię i nazwisko klienta

    SELECT klient.imie, klient.nazwisko, faktura.*

    FROM faktura

    LEFT JOIN klient ON faktura.id_klient = klient.id_klient


    ;17.2 Wyszukaj klientów, którzy nie opłacili jeszcze faktury.

    SELECT klient.imie, klient.nazwisko, faktura.czy_oplacona
    FROM klient
    INNER JOIN faktura ON faktura.id_klient = klient.id_klient
    WHERE czy_oplacona = 'false'


    ;17.3 Znajdź te produkty, które są zamawiane w dużych ilościach, tzn w pojedynczym koszyku wartość kolumny ilosc_sztuk jest większa niż 100.

    SELECT produkt.nazwa, koszyk.ilosc_sztuk
    FROM produkt
    LEFT JOIN koszyk ON produkt.id_produkt = koszyk.id_produkt
    WHERE ilosc_sztuk > '100'


;18 Złączenia wewnętrzne większej liczby tabel 

    ;18.1 Dla każdego klienta, który choć raz złożył zamówienie, wyszukaj kiedy oraz  jakie produkty zamówił. Wyświetl imię i nazwisko klienta oraz datę zamówienia,nazwę  produktów w koszyku . Wynik posortuj rosnąco po nazwisku i imieniu klienta.

    SELECT klient.imie, klient.nazwisko, zamowienie.data_zamowienia, produkt.nazwa

    FROM klient

    INNER JOIN zamowienie ON zamowienie.id_klient = klient.id_klient

    INNER JOIN koszyk ON zamowienie.id_zamowienie = koszyk.id_zamowienie

    INNER JOIN produkt ON koszyk.id_produkt = produkt.id_produkt

    ORDER BY imie, nazwisko ASC


;19

    ;19.1 Dla każdego klienta oblicz ile faktur zostało wystawionych. 

    (Uwzględnij też klientów, którzy nie otrzymali żadnej faktury.) Wynik posortuj malejąco po oblicznej ilości, a dla takiej samej ilości posortuj leksykograficznie po nazwisku klienta.

    SELECT COUNT(faktura.id_faktura) AS ilosc_faktur, klient.imie, klient.nazwisko

    FROM klient

    LEFT JOIN faktura ON klient.id_klient = faktura.id_klient

    GROUP BY klient.imie, klient.nazwisko

    ORDER BY ilosc_faktur DESC, klient.nazwisko ASC


    ;19.2* Dla każdej podkategorii (tabela podkategoria kolumna nazwa), wyświetl informację ile znajduje się produktów z danej podkategorii w tabeli produkt. 

    SELECT COUNT(produkt.nazwa) AS ilosc_produktow, podkategoria.nazwa

    FROM podkategoria

    LEFT JOIN produkt ON podkategoria.id_podkategoria = produkt.id_podkategoria

    GROUP BY podkategoria.nazwa


    ;19.3* Dla każdej podkategorii (tabela podkategoria kolumna nazwa), wyświetl informację ile znajduje się produktów z danej podkategorii w tabeli produkt.  Uwzględnij też podkategorie, które nie posiadają  żadnego produktu  w tabeli produkt. Wynik posortuj malejąco po obliczonej ilości, a dla takiej samej  ilości posortuj leksykograficznie po nazwie podkategorii.

    SELECT COUNT(produkt.nazwa) AS ilosc_produktow, podkategoria.nazwa

    FROM podkategoria

    LEFT JOIN produkt ON podkategoria.id_podkategoria = produkt.id_podkategoria

    GROUP BY podkategoria.nazwa

    ORDER BY ilosc_produktow DESC, podkategoria.nazwa ASC


;20

    ;20.1 Znaleźć największą pensję pracownika.

    SELECT MAX(pensja) AS Najwieksza_pensja

    FROM pracownik;


    ;20.2 Znaleźć średnią rabat klienta wypożyczalni. 

    SELECT AVG(rabat) AS sredni_rabat

    FROM klient;


    ;20.3 Znaleźć najwcześniejszą datę wystawienia faktury.

    SELECT MIN(data_wystawienia) AS najwczesniejsza_faktura

    FROM faktura;


;21


    ;21.1 Dla każdego produktu (identyfikator, nazwa) oblicz ilość zamówień (wystąpienia w tabeli koszyk). Wynik posortuj rosnąco względem ilości zamówień. (Nie zapomnij o produktachh, które ani razu nie zostały zamówione).

    SELECT produkt.nazwa, COUNT(koszyk.id_zamowienie) AS ‘ilosc zamowien’

    FROM ((koszyk LEFT JOIN zamowienie ON koszyk.id_zamowienie = zamowienie.id_zamowienie) LEFT JOIN produkt ON koszyk.id_produkt = produkt.id_produkt)

    GROUP BY produkt.nazwa

    HAVING COUNT (koszyk.id_zamowienie) > 0

    ORDER BY ‘ilosc zamowien’ DESC


    ;21.2 Znajdź klientów, którzy co najmniej 2 razy złożyli zamówienie. Wypisz dla tych klientów imię, nazwisko i ilość zamówień. Wynik posortuj względem imienia i nazwiska.

    SELECT klient.imie, klient.nazwisko, COUNT (id_zamowienie) AS ‘ilosc zamowien’

    FROM klient LEFT JOIN zmowienie ON klient.id_klient = zamowienie.id_klient

    GROUP BY klient.imie, klient.nazwisko

    HAVING COUNT (id_zamowienie) > 1

    ORDER BY nazwisko, imie;


    ;21.3 Znajdź produkty, które pojawiły się w co najmniej 3 zamówieniach. Wyświetl ich nazwę i ilość zamówień w których się pojawiły.

    SELECT produkt.nazwa, COUNT (koszyk.id_zamowienie) AS ‘ilosc zamowien’

    FROM ((koszyk LEFT JOIN zamowienie ON koszyk.id_zamowienie = zamowienie.id_zamowienie) LEFT JOIN produkt ON koszyk.id_produkt = produkt.id_produkt)

    GROUP BY produkt.nazwa

    HAVING COUNT (koszyk.id_zamowienie) > 2


    ;21.4 Znajdź pracowników, którzy obsługiwali co najwyżej 5 zamówień. Wyświetl ich imiona, nazwiska oraz łączną ilość zamówień.

    SELECT pracownik.imie, prcownik.nazwisko, COUNT (id_zamowienie) AS ‘ilosc zamowien’

    FROM zamowienie RIGHT JOIN pracownik ON pracownik.id_pracownik = zamowienie.id_pracownik

    GROUP BY pracownik.imie, pracownik.nazwisko

    HAVING COUNT (id_zamowienie) < 6 AND COUNT (id_zamowienie) > 0



;22

    ;22.1 Wyświetl imiona, nazwiska i pensje pracowników, którzy posiadają najwyższą pensję. 

    SELECT imie, nazwisko, pensja AS ‘najwyzsza pensja’

    FROM pracownik

    WHERE pensja = (SELECT MAX(pensja) FROM pracownik)


    ;22.2 Wyświetl pracowników (imiona, nazwiska, pensje), którzy zarabiają powyżej średniej pensji. 

    SELECT imie, nazwisko, pensja AS ‘wyzsza od sredniej’

    FROM pracownik

    WHERE pensja > (SELECT AVG(pensja) FROM pracownik)


 
;23 Podzapytania nieskorelowane z predykatem IN 


    ;23.1 Wyświetl wszystkie produkty (nazwa), które do tej pory nie zostały zamówione. 

    SELECT produkt.nazwa, COUNT (koszyk.id_zamowienie) AS ‘ilosc zamowien’

    FROM ((koszyk FULL JOIN zamowienie ON koszyk.id_zamowienie =  zamowienie.id_zamowienie) FULL JOIN produkt ON koszyk.id_produkt = produkt.id_produkt)

    GROUP BY produkt.nazwa

    HAVING COUNT (koszyk.id_zamowienie) = 0


    ;23.2 Wyświetl klientów (imię i nazwisko), którzy do tej pory nie zamówili  żadnego produktu. Wynik posortuj rosnąco względem nazwiska i imienia klienta. 

    SELECT klient.imie, klient.nazwisko, COUNT (id.zamowienie) AS ‘ilosc zamowien’

    FROM klient FULL JOIN zamowienie ON klient.id_klient = zamowienie.id_klient

    GROUP BY klient.imie, klient.nazwisko

    HAVING COUNT (id_zamowienie) = 0

    ORDER BY nazwisko ASC, imie ASC;


;23 Podzapytania nieskorelowane z predykatem IN 

    ;23.1 Wyświetl wszystkie produkty (nazwa), które do tej pory nie zostały zamówione. 

    SELECT produkt.nazwa, COUNT (koszyk.id_zamowienie) AS ‘ilosc zamowien’

    FROM ((koszyk FULL JOIN zamowienie ON koszyk.id_zamowienie =  zamowienie.id_zamowienie) FULL JOIN produkt ON koszyk.id_produkt = produkt.id_produkt)

    GROUP BY produkt.nazwa

    HAVING COUNT (koszyk.id_zamowienie) = 0


    ;23.2 Wyświetl klientów (imię i nazwisko), którzy do tej pory nie zamówili  żadnego produktu. Wynik posortuj rosnąco względem nazwiska i imienia klienta. 

    SELECT klient.imie, klient.nazwisko, COUNT (id.zamowienie) AS ‘ilosc zamowien’

    FROM klient FULL JOIN zamowienie ON klient.id_klient = zamowienie.id_klient

    GROUP BY klient.imie, klient.nazwisko

    HAVING COUNT (id_zamowienie) = 0

    ORDER BY nazwisko ASC, imie ASC;



;24

    ;24.1 Znajdź klienta/klientów(id_klient, imię, nazwisko) którzy najrzadziej zamawiają produkty. Wynik posortuj rosnąco względem nazwiska i imienia. Nie uwzględniaj klientów, którzy ani razu nie zamówili produktu.

    SELECT klient.imie, klient.id_klient, klient.nazwisko FROM klient JOIN zamowienie ON klient.id_klient = zamowienie.id_klient

    GROUP BY klient.imie, klient.id_klient, klient.nazwisko HAVING COUNT (zamowienie.id_klient)=

    (SELECT top 1 COUNT(id_klient) AS 'liczba' FROM zamowienie GROUP BY id_klient ORDER BY liczba ASC)


    ;24.2 Znajdź pracownika/pracowników, który przyjął najwięcej zamówień.  Wynik posortuj rosnąco względem nazwiska i imienia. 

    SELECT pracownik.id_pracownik, pracownik.imie, pracownik.nazwisko FROM pracownik

    JOIN zamowienie ON pracownik.id_pracownik = zamowienie.id_pracownik

    GROUP BY pracownik.id_pracownik, pracownik.imie, pracownik.nazwisko HAVING COUNT(zamowienie.id_pracownik) =

    (SELECT TOP 1 COUNT(id_pracownik) AS 'ilosc' FROM zamowienie GROUP BY id_pracownik ORDER BY 'ilosc' desc)

    ORDER BY pracownik.nazwisko, pracownik.imie ASC


    ;24.3 Znajdź produkt najczęściej zamawiany.  

    SELECT produkt.id_produkt, produkt.nazwa FROM produkt

    JOIN koszyk ON produkt.id_produkt = koszyk.id_produkt

    GROUP BY produkt.id_produkt, produkt.nazwa HAVING COUNT(koszyk.id_produkt) =

    (SELECT TOP 1 COUNT(id_produkt) AS 'ilosc' FROM koszyk GROUP BY id_produkt ORDER BY 'ilosc' desc)

    ORDER BY produkt.nazwa ASC



;25

    ;25.1 Podwyż o 10 % pensję pracownikom, którzy zarabiają poniżej średniej.

    UPDATE pracownik SET pensja = pensja * 1.1 WHERE (pensja) < (SELECT AVG(pensja) FROM pracownik);


    ;25.2 Pracownikom, którzy w październiku przyjęli najwięcej zamówień zwiększ dodatek o 100zł

    UPDATE pracownik

    SET dodatek = COALESCE(dodatek, 0) + 100

    WHERE id_pracownik IN (SELECT pracownik.id_pracownik

    FROM pracownik JOIN zamowienie ON pracownik.id_pracownik = zamowienie.id_pracownik

    WHERE MONTH(data_zamowienia) = 10

    GROUP BY pracownik.id_pracownik

    HAVING COUNT(zamowienie.id_pracownik) = (SELECT TOP 1 COUNT(id_pracownik) AS 'liczba' FROM zamowienie WHERE MONTH(data_zamowienia) = 10 GROUP BY id_pracownik ORDER BY liczba DESC));



;26


    ;26.1 Usuń klientów, którzy nie złożyli żadnego zamówienia.

    SELECT klient.id_klient, klient.nazwisko, klient.imie

    FROM klient

    WHERE id_klient NOT IN (SELECT id_klient FROM zamowienie);

    DELETE

    FROM klient

    WHERE id_klient NOT IN (SELECT id_klient FROM zamowienie);





;27 UNION, UNION ALL, INTERSECT, EXCEPT

    ;27.1 Wyświetl razem wszystkie imiona i nazwiska pracowników i klientów (suma dwóch zbiorów). Wynik posortuj względem nazwiska i imienia. Rozpatrz dwa przypadki:

        ;1. Z pominięciem duplikatów

        SELECT nazwisko, imie FROM klient

        UNION

        SELECT nazwisko, imie FROM pracownik

        ORDER BY nazwisko, imie ASC;


        ;2. z wyświetleniem duplikatów

        SELECT nazwisko, imie FROM klient

        UNION ALL

        SELECT nazwisko, imie FROM pracownik

        ORDER BY nazwisko, imie ASC;



   ; 27.2 Wyświetl powtarzające się imiona i nazwiska klientów i pracowników (Część wspólna dwóch zbiorów)

    SELECT nazwisko, imie FROM klient

    INTERSECT

    SELECT nazwisko, imie FROM pracownik

    ORDER BY nazwisko, imie ASC;


   ; 27.3 Wyświetl imiona i nazwiska pracowników, którzy nazywają się inaczej niż klienci. Wynik posortuj względem nazwiska i imienia. (Różnica dwóch zbiorów)

    SELECT nazwisko, imie FROM klient

    EXCEPT

    SELECT nazwisko, imie FROM pracownik

    ORDER BY nazwisko, imie ASC;
 

; ---------------------------------------------------------------------------------------------------------

; Utwórz tabele:

; pojazd(id_pojazd - int niepusty, automatycznie nadawany klucz głowny,
; marka -ciąg znaków (do 12 znaków)
; typ-ciąg znaków (do 12 znaków)
; data produkcji - data
; stan -ciąg znaków (do 200 znaków) )

    CREATE TABLE pojazd(
    id_pojazd INT PRIMARY KEY identity (1,1),
    marka VARCHAR(12) not null,
    typ VARCHAR(12) not null,
    data_produkcji DATE not null,
    stan VARCHAR(200) not null)



; klient(id_klient - int niepusty automatycznie nadawany klucz główny,
; imie ciąg znaków (do 12 znaków)
; nazwisko ciąg znaków (do 12 znaków)
; telefon ciąg znaków (9 znaków) (same cyfry)
; data_ur- data)

    CREATE TABLE klient2(
    id_klient INT PRIMARY KEY identity (1,1),
    imie VARCHAR(12) not null,
    nazwisko VARCHAR(12) not null,
    telefon VARCHAR(9) not null check(len(telefon)=9 and telefon like('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')),
    data_ur DATE not null
    )

; wypozyczenie(
; id_klient -int klucz obcy 
; id_pojazd- int klucz obcy
; data_wyp - pobierana data systemowa,
; data_zwrotu- data))

    CREATE TABLE wypozyczenie(
    id_wypozyczenie INT PRIMARY KEY identity (1,1),
    id_klient INT FOREIGN KEY references klient(id_klient),
    id_pojazd INT FOREIGN KEY references pojazd(id_pojazd),
    data_wyp DATE DEFAULT GETDATE() not null,
    data_zwrotu DATE not null
    )

; Dodaj kilka rekordów do kazdej z tabel.

    INSERT INTO pojazd (marka, typ, data_produkcji, stan)

    VALUES ('honda', 'jazz', '12.02.2019', 'nowy')

    

    INSERT INTO pojazd (marka, typ, data_produkcji, stan)

    VALUES ('mercedes', 'gla', '10-06-2017', 'nowy')

    

    INSERT INTO klient2 (imie, nazwisko, telefon, data_ur)

    VALUES ('Adam', 'Nowak', '123456789', '12-05-1981')

    

    INSERT INTO klient2 (imie, nazwisko, telefon, data_ur)

    VALUES ('Karolina', 'Kowalska', '374967264', '04-11-1972')

    

    INSERT INTO wypozyczenie(id_klient, id_pojazd,data_zwrotu)

    VALUES (1,1,'2021-01-12');

    

    INSERT INTO wypozyczenie(id_klient, id_pojazd,data_zwrotu)

    VALUES (2,2,'2021-02-02');




; Zadanie2
; 1 Dana jest tabela CREATE TABLE student2(id_student INT IDENTITY(1,1) PRIMARY KEY, nazwisko VARCHAR(20), nr_indeksu INT, stypendium MONEY); 

; Wprowadź ograniczenia na tabelę student2:
; -nazwisko – niepusta kolumna,
; -nr_indeksu – unikatowa kolumna,
; -stypendium –nie może być niższe niż1300zł,
; -dodatkowo dodaj niepustą kolumnę imie.


    CREATE TABLE student2(
    id_student INT IDENTITY(1,1) PRIMARY KEY,
    imie VARCHAR(20) not null,
    nazwisko VARCHAR(20) not null,
    nr_indeksu INT UNIQUE,
    stypendium MONEY check(stypendium > 1300)
    )

 

    INSERT INTO student2 (imie, nazwisko, nr_indeksu, stypendium)

    VALUES ('Tomek', 'Kowalski', '123456', '2000')

    

    INSERT INTO student2 (imie, nazwisko, nr_indeksu, stypendium)

    VALUES ('Jagoda', 'Kwiecień', '345321', '1600')


 ------------------------------------


